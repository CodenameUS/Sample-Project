using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ItemSlotUI : MonoBehaviour
{
    [SerializeField] private Image iconImage;           // 아이템 아이콘(이미지)
    [SerializeField] private Text amountText;           // 아이템 수량
    [SerializeField] private Image highlightImage;      // 하이라이트 이미지
    
    private Image slotImage;
    private InventoryUI inventoryUI;

    private RectTransform slotRect;                     // 슬롯의 RT
    private RectTransform iconRect;                     // 슬롯의 아이템 아이콘 RT
    private RectTransform highlightRect;                // 슬롯의 하이라이트 RT

    private GameObject iconGo;                          
    private GameObject textGo;
    private GameObject highlightGo;


    private float padding = 1f;                         // 슬롯 내 아이콘과 슬롯 사이 여백
    private float maxHighlightAlpha = 0.5f;             // 하이라이트 이미지 알파값
    private float currentHighlightAlpha = 0f;           // 현재 하이라이트 이미지 알파값
    private float highlightFadeDuration = 0.2f;         // 하이라이트 소요 시간

    private bool isAccessibleSlot = true;               // 슬롯 접근가능 여부
    private bool isAccessibleItem = true;               // 아이템 접근가능 여부

    // 비활성화된 슬롯 색상
    private Color InAccessibleSlotColor = new Color(0.2f, 0.2f, 0.2f, 0.5f);
    // 비활성화된 아이콘 색상
    private Color InAccessibleIconColor = new Color(0.5f, 0.5f, 0.5f, 0.5f);

    #region ** PROPERTIES **
    public int Index { get; private set; }              // 슬롯 인덱스
    public bool HasItem => iconImage.sprite != null;    // 슬롯에 아이템이 있는지 여부(sprite 여부로 확인)

    public bool IsAccessible => isAccessibleItem && isAccessibleSlot;

    public RectTransform SlotRect => slotRect;

    public RectTransform IconRect => iconRect;
    #endregion

    private void Awake()
    {
        InitComponents();
        InitValues();
    }

    // 초기화
    private void InitComponents()
    {
        inventoryUI = GetComponentInParent<InventoryUI>();

        slotRect = GetComponent<RectTransform>();
        iconRect = iconImage.rectTransform;
        highlightRect = highlightImage.rectTransform;

        iconGo = iconRect.gameObject;
        textGo = amountText.gameObject;
        highlightGo = highlightImage.gameObject;

        slotImage = GetComponent<Image>();
    }

    // 초기화
    private void InitValues()
    {
        // 아이콘 RT 설정(Pivot : 중앙, Anchor : Top Left)
        iconRect.pivot = new Vector2(0.5f, 0.5f);
        iconRect.anchorMin = Vector2.zero;
        iconRect.anchorMax = Vector2.one;

        // 아이콘 패딩 설정
        iconRect.offsetMin = Vector2.one * (padding);
        iconRect.offsetMax = Vector2.one * (-padding);

        // 아이콘과 하이라이트 RT를 동일하게 설정
        highlightRect.pivot = iconRect.pivot;
        highlightRect.anchorMin = iconRect.anchorMin;
        highlightRect.anchorMax = iconRect.anchorMax;
        highlightRect.offsetMin = iconRect.offsetMin;
        highlightRect.offsetMax = iconRect.offsetMax;

        // 아이콘 및 하이라이트 이미지는 클릭X
        iconImage.raycastTarget = false;
        highlightImage.raycastTarget = false;

        HideIcon();
        // 하이라이트 효과 꺼놓기
        highlightGo.SetActive(false);
    }

    // 아이템 아이콘 활성화
    private void ShowIcon() => iconGo.SetActive(true);
    
    // 아이템 아이콘 비활성화
    private void HideIcon() => iconGo.SetActive(false);
   
    // 수량 텍스트 활성화
    private void ShowText() => textGo.SetActive(true);
    
    // 수량 텍스트 비활성화
    private void HideText() => textGo.SetActive(false);


    // 슬롯 인덱스 설정
    public void SetSlotIndex(int index) => Index = index;
    
    // 슬롯 활성화/비활성화 여부 설정
    public void SetSlotAccessibleState(bool value)
    {
        // 현재 슬롯상태가 설정하고자하는 value와 같으면 무시
        if (isAccessibleSlot == value) return;

        // 활성화된 슬롯
        if(value)
        {
            slotImage.color = Color.black;
        }
        // 비활성화된 슬롯
        else
        {
            slotImage.color = InAccessibleSlotColor;
            HideIcon();
            HideText();
        }

        isAccessibleSlot = value;
    }

    // 아이템 활성화/비활성화 여부 설정
    public void SetItemAccessibleState(bool value)
    {
        // 현재 아이템상태가 설정하고자하는 value와 같으면 무시
        if (isAccessibleItem == value) return;

        // 활성화된 아이템 색상
        if(value)
        {
            iconImage.color = Color.white;
            amountText.color = Color.white;
        }
        // 비활성화된 아이템 색상
        else
        {
            iconImage.color = InAccessibleIconColor;
            amountText.color = InAccessibleIconColor;
        }

        isAccessibleItem = value;
    }

    // 하이라이트 이미지를 상/하단으로 표시
    public void SetHighlightOnTop(bool value)
    {
        if (value)
            highlightRect.SetAsLastSibling();
        else
            highlightRect.SetAsFirstSibling();
    }

    // 슬롯 하이라이트 표시 및 해제
    public void Highlight(bool show)
    {
        if (show)
            StartCoroutine(nameof(HighlightFadeIn));
        else
            StartCoroutine(nameof(HighlightFadeOut));
    }

    // 하이라이트 Fade-in
    private IEnumerator HighlightFadeIn()
    {
        // 실행중인 fade-out 멈추기
        StopCoroutine(nameof(HighlightFadeOut));

        // 하이라이트 이미지 활성화
        highlightGo.SetActive(true);

        float timer = maxHighlightAlpha / highlightFadeDuration;

        // 하이라이트 이미지 알파값을 서서히 증가시키기
        for(; currentHighlightAlpha <= maxHighlightAlpha; currentHighlightAlpha += timer * Time.deltaTime)
        {
            highlightImage.color = new Color(
                     highlightImage.color.r,
                     highlightImage.color.g,
                     highlightImage.color.b,
                     currentHighlightAlpha
                );

            yield return null;
        }
    }

    // 하이라이트 Fade-out
    private IEnumerator HighlightFadeOut()
    {
        StopCoroutine(nameof(HighlightFadeIn));

        float timer = maxHighlightAlpha / highlightFadeDuration;

        // 하이라이트 이미지 알파값을 서서히 감소시키기
        for(; currentHighlightAlpha >= 0f; currentHighlightAlpha -= timer * Time.deltaTime)
        {
            highlightImage.color = new Color(
                     highlightImage.color.r,
                     highlightImage.color.g,
                     highlightImage.color.b,
                     currentHighlightAlpha
                );

            yield return null;
        }

        highlightGo.SetActive(false);
    }
}
